{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","categoryState","atom","key","default","TO_DO","persistAtom","recoilPersist","toDoState","effects_UNSTABLE","toDoSelector","selector","get","toDos","category","filter","toDo","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","useForm","register","handleSubmit","setValue","onSubmit","oldToDos","text","id","Date","now","required","placeholder","ToDo","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","DOING","DONE","delToDo","ToDoList","useRecoilState","setCategory","console","log","value","onInput","map","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.cb4fcf25.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\nimport { recoilPersist } from \"recoil-persist\";\n\nexport enum Categories {\n    \"TO_DO\" = \"TO_DO\",\n    \"DOING\" = \"DOING\",\n    \"DONE\" = \"DONE\",\n}\n\nexport interface IToDo {\n    text: string;\n    id: number;\n    category: Categories;\n}\n\nexport const categoryState = atom<Categories>({\n    key: \"category\",\n    default: Categories.TO_DO,\n});\n\nexport const { persistAtom } = recoilPersist({\n    key: \"toDo\",\n});\n\nexport const toDoState = atom<IToDo[]>({\n    key: \"toDo\",\n    default: [],\n    effects_UNSTABLE: [persistAtom],\n});\n\nexport const toDoSelector = selector({\n    key: \"toDoSelector\",\n    get: ({ get }) => {\n        const toDos = get(toDoState);\n        const category = get(categoryState);\n        return toDos.filter((toDo) => toDo.category === category);\n    },\n});\n","import { useForm } from \"react-hook-form\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { categoryState, toDoState } from \"../atoms\";\n\ninterface IForm {\n    toDo: string;\n}\n\nfunction CreateToDo() {\n    const setToDos = useSetRecoilState(toDoState);\n    const category = useRecoilValue(categoryState);\n    const { register, handleSubmit, setValue } = useForm<IForm>();\n    const handleValid = ({ toDo }: IForm) => {\n        setToDos((oldToDos) => [{ text: toDo, id: Date.now(), category }, ...oldToDos]);\n        setValue(\"toDo\", \"\");\n    };\n    return (\n        <form onSubmit={handleSubmit(handleValid)}>\n            <input\n                {...register(\"toDo\", {\n                    required: \"Please write a To Do\",\n                })}\n                placeholder=\"Write a to do\"\n            />\n            <button>Add</button>\n        </form>\n    );\n}\n\nexport default CreateToDo;\n","import React from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport { Categories, IToDo, toDoState } from \"../atoms\";\n\nfunction ToDo({ text, category, id }: IToDo) {\n    const setToDos = useSetRecoilState(toDoState);\n    const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        const {\n            currentTarget: { name },\n        } = event;\n        setToDos((oldToDos) => {\n            const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n            const newToDo = { text, id, category: name as any };\n            return [...oldToDos.slice(0, targetIndex), newToDo, ...oldToDos.slice(targetIndex + 1)];\n        });\n    };\n    const onDeleteClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        const {\n            currentTarget: { name },\n        } = event;\n\n        setToDos((oldToDos) => {\n            const delToDo = { text, id, category: name as any };\n            const newTodo = oldToDos.filter((toDo) => toDo.id !== delToDo.id);\n            return newTodo;\n        });\n    };\n    return (\n        <li>\n            <span>{text}</span>\n            {category !== Categories.DOING && (\n                <button name={Categories.DOING} onClick={onClick}>\n                    Doing\n                </button>\n            )}\n            {category !== Categories.TO_DO && (\n                <button name={Categories.TO_DO} onClick={onClick}>\n                    To Do\n                </button>\n            )}\n            {category !== Categories.DONE && (\n                <button name={Categories.DONE} onClick={onClick}>\n                    Done\n                </button>\n            )}\n            <button onClick={onDeleteClick}>remove</button>\n        </li>\n    );\n}\n\nexport default ToDo;\n","import React from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { Categories, categoryState, toDoSelector } from \"../atoms\";\nimport CreateToDo from \"./CreateToDo\";\nimport ToDo from \"./ToDo\";\n\nfunction ToDoList() {\n    const toDos = useRecoilValue(toDoSelector);\n    const [category, setCategory] = useRecoilState(categoryState);\n    const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n        setCategory(event.currentTarget.value as any);\n    };\n    console.log(toDos);\n    return (\n        <div>\n            <h1>To Dos</h1>\n            <hr />\n            <select value={category} onInput={onInput}>\n                <option value={Categories.TO_DO}>To Do</option>\n                <option value={Categories.DOING}>Doing</option>\n                <option value={Categories.DONE}>Done</option>\n            </select>\n            <CreateToDo />\n            {toDos?.map((toDo) => (\n                <ToDo key={toDo.id} {...toDo} />\n            ))}\n        </div>\n    );\n}\n\nexport default ToDoList;\n","import { createGlobalStyle } from \"styled-components\";\nimport ToDoList from \"./components/ToDoList\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <RecoilRoot>\n            <ThemeProvider theme={darkTheme}>\n                <App />\n            </ThemeProvider>\n        </RecoilRoot>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"white\",\n  accentColor: \"#9c88ff\",\n  cardBgColor: \"transparent\",\n};\n"],"sourceRoot":""}