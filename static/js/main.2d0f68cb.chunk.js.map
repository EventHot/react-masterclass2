{"version":3,"sources":["atoms.tsx","components/CreateCategory.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["categoryState","atom","key","default","persistAtom","recoilPersist","categoriesState","effects_UNSTABLE","toDoState","toDoCategorySelector","selector","get","toDoSelector","toDos","category","filter","toDo","CreateCategory","setToDosCategory","useSetRecoilState","useForm","register","handleSubmit","setValue","onSubmit","toDoCategory","oldToDos","required","placeholder","CreateToDo","setToDos","useRecoilValue","text","id","Date","now","TodoItem","styled","div","Do","ToDo","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","map","cate","delToDo","Container","ContainerCategory","ToDoList","useRecoilState","setCategory","value","onInput","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.2d0f68cb.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\nimport { recoilPersist } from \"recoil-persist\";\n\nexport interface IToDo {\n    text: string;\n    id: number;\n    category: string;\n}\n\nexport const categoryState = atom<string>({\n    key: \"category\",\n    default: \"TO_DO\",\n});\n\nexport const { persistAtom } = recoilPersist({\n    key: \"toDoPersist\",\n});\n\nexport const categoriesState = atom<string[]>({\n    key: \"categories\",\n    default: [\"TO_DO\", \"DOING\", \"DONE\"],\n    effects_UNSTABLE: [persistAtom],\n});\n\nexport const toDoState = atom<IToDo[]>({\n    key: \"toDo\",\n    default: [],\n    effects_UNSTABLE: [persistAtom],\n});\n\nexport const toDoCategorySelector = selector({\n    key: \"toDoCategorySelector\",\n    get: ({ get }) => {\n        const toDoCategory = get(categoriesState);\n\n        return toDoCategory;\n    },\n});\n\nexport const toDoSelector = selector({\n    key: \"toDoSelector\",\n    get: ({ get }) => {\n        const toDos = get(toDoState);\n        const category = get(categoryState);\n        return toDos.filter((toDo) => toDo.category === category);\n    },\n});\n","import { useForm } from \"react-hook-form\";\nimport { useSetRecoilState } from \"recoil\";\nimport { categoriesState } from \"../atoms\";\n\ninterface IForm {\n    toDoCategory: string;\n}\n\nfunction CreateCategory() {\n    const setToDosCategory = useSetRecoilState(categoriesState);\n    const { register, handleSubmit, setValue } = useForm<IForm>();\n    const handleValid = ({ toDoCategory }: IForm) => {\n        setToDosCategory((oldToDos) => [...oldToDos, toDoCategory]);\n        setValue(\"toDoCategory\", \"\");\n    };\n    return (\n        <form onSubmit={handleSubmit(handleValid)}>\n            <input\n                {...register(\"toDoCategory\", {\n                    required: \"Please write a To Do Category\",\n                })}\n                placeholder=\"Write a to do Category\"\n            />\n            <button>Add</button>\n        </form>\n    );\n}\n\nexport default CreateCategory;\n","import { useForm } from \"react-hook-form\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { categoryState, toDoState } from \"../atoms\";\n\ninterface IForm {\n    toDo: string;\n}\n\nfunction CreateToDo() {\n    const setToDos = useSetRecoilState(toDoState);\n    const category = useRecoilValue(categoryState);\n    const { register, handleSubmit, setValue } = useForm<IForm>();\n    const handleValid = ({ toDo }: IForm) => {\n        setToDos((oldToDos) => [{ text: toDo, id: Date.now(), category }, ...oldToDos]);\n        setValue(\"toDo\", \"\");\n    };\n    return (\n        <form onSubmit={handleSubmit(handleValid)}>\n            <input\n                {...register(\"toDo\", {\n                    required: \"Please write a To Do\",\n                })}\n                placeholder=\"Write a to do\"\n            />\n            <button>Add</button>\n        </form>\n    );\n}\n\nexport default CreateToDo;\n","import React from \"react\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { toDoCategorySelector, IToDo, toDoState } from \"../atoms\";\n\nexport const TodoItem = styled.div`\n    padding: 5px 5px;\n    border: 1px solid #fff;\n    width: 50%;\n    display: flex;\n    margin-bottom: 10px;\n    border-radius: 5px;\n    justify-content: center;\n    align-items: center;\n`;\n\nexport const Do = styled.div`\n    flex: 1;\n`;\n\nfunction ToDo({ text, category, id }: IToDo) {\n    const setToDos = useSetRecoilState(toDoState);\n    const toDoCategory = useRecoilValue(toDoCategorySelector);\n\n    const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        const {\n            currentTarget: { name },\n        } = event;\n        setToDos((oldToDos) => {\n            const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n            const newToDo = { text, id, category: name as any };\n            return [...oldToDos.slice(0, targetIndex), newToDo, ...oldToDos.slice(targetIndex + 1)];\n        });\n    };\n    const onDeleteClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        const {\n            currentTarget: { name },\n        } = event;\n\n        setToDos((oldToDos) => {\n            const delToDo = { text, id, category: name as any };\n            const newTodo = oldToDos.filter((toDo) => toDo.id !== delToDo.id);\n            return newTodo;\n        });\n    };\n    return (\n        <TodoItem>\n            <Do>{text}</Do>\n            {toDoCategory.map((cate) => {\n                return (\n                    category !== cate && (\n                        <button name={cate} onClick={onClick}>\n                            {cate}\n                        </button>\n                    )\n                );\n            })}\n            <button onClick={onDeleteClick}>REMOVE</button>\n        </TodoItem>\n    );\n}\n\nexport default ToDo;\n","import React from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport styled from \"styled-components\";\nimport { toDoCategorySelector, categoryState, toDoSelector } from \"../atoms\";\nimport CreateCategory from \"./CreateCategory\";\nimport CreateToDo from \"./CreateToDo\";\nimport ToDo from \"./ToDo\";\n\nexport const Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`;\nexport const ContainerCategory = styled.div`\n    display: flex;\n    flex-direction: row;\n    margin-bottom: 20px;\n`;\n\nfunction ToDoList() {\n    const toDos = useRecoilValue(toDoSelector);\n    const toDoCategory = useRecoilValue(toDoCategorySelector);\n\n    const [category, setCategory] = useRecoilState(categoryState);\n    const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n        setCategory(event.currentTarget.value as any);\n    };\n\n    return (\n        <Container>\n            <div>\n                <h1>TO-DO LIST</h1>\n            </div>\n            <hr />\n            <ContainerCategory>\n                <select value={category} onInput={onInput}>\n                    {toDoCategory.map((cate) => (\n                        <option value={cate}>{cate}</option>\n                    ))}\n                </select>\n                <CreateCategory />\n            </ContainerCategory>\n            <CreateToDo />\n            {toDos?.map((toDo) => (\n                <ToDo key={toDo.id} {...toDo} />\n            ))}\n        </Container>\n    );\n}\n\nexport default ToDoList;\n","import { createGlobalStyle } from \"styled-components\";\nimport ToDoList from \"./components/ToDoList\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nfunction App() {\n    return (\n        <>\n            <GlobalStyle />\n            <ToDoList />\n        </>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <RecoilRoot>\n            <ThemeProvider theme={darkTheme}>\n                <App />\n            </ThemeProvider>\n        </RecoilRoot>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n    bgColor: \"black\",\n    textColor: \"white\",\n    accentColor: \"#9c88ff\",\n    cardBgColor: \"transparent\",\n};\n"],"sourceRoot":""}